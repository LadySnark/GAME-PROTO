<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
grav = .55;
jumpspeed = 5;
movespeed = 4;
health = 5;
hspeed = 0;
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Player Input
key_right = 0;
key_left = 0;
key_jump = 0;

if (keyboard_check(vk_right) or keyboard_check(ord("D"))) key_right = 1;
if (keyboard_check(vk_left) or keyboard_check(ord("A"))) key_left = -1;
if (keyboard_check(vk_up) or keyboard_check(ord("W")) or keyboard_check(vk_space)) key_jump = 1;

//Responding to Player Input
//Look for better way of doing jumping
while (x &gt; 0) 
{
    move = key_left + key_right;
}
hspeed = move * movespeed;
if (vspeed &lt; 10) vspeed += grav;
if (place_meeting(x,y+1,obj_ground_1))
{
    vspeed = key_jump * -jumpspeed;
}
if (vspeed != 0)
{
    if (hspeed &gt; 3) hspeed = 3;
}
//Horizontal Collision
//We can streamline collision by using the same dirt tile ground_1 and a grass mask with depth -1
if (place_meeting(x+hspeed, y, obj_ground_1)) 
{
    while(!place_meeting(x+sign(hspeed),y, obj_ground_1))
    {
        x += sign(hspeed);
    }
    hspeed = 0;
}
x += hspeed;
//Vertical Collision
if (place_meeting(x,y+vspeed, obj_ground_1))
{
    while(!place_meeting(x,y+sign(vspeed),obj_ground_1))
        {
            y += sign(vspeed);
        }
        vspeed = 0;
    }
    y += vspeed;
//Player Death

//Player Animations
//
//if (hspeed &gt; 0)
//{
//   sprite_index = spr_walk_r;
//}
//if (hspeed &lt; 0)
//{
//    sprite_index = spr_walk_l;
//}
//if (hspeed == 0) sprite_index = spr_player;
//if (vspeed != 0 and hspeed &lt;= 0) sprite_index = spr_jump_l;
//if (vspeed != 0 and hspeed &gt;= 0) sprite_index = spr_jump_r;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
